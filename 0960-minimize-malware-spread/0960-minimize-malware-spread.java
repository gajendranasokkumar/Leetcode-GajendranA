class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int rows = graph.length;
        DisjointSet ds = new DisjointSet(rows);

        for (int i = 0; i < rows; i++) {
            for (int j = i + 1; j < rows; j++) {
                if (graph[i][j] == 1) {
                    ds.union(i, j);
                }
            }
        }

        int[] infectedCount = new int[rows];
        for (int node : initial) {
            infectedCount[ds.find(node)]++;
        }

        Arrays.sort(initial);
        int maxnode = initial[0];
        int maxi = 0;

        for (int node : initial) {
            int root = ds.find(node);
            if (infectedCount[root] == 1) { 
                int size_up = ds.size[root];
                if (size_up > maxi) {
                    maxi = size_up;
                    maxnode = node;
                }
            }
        }

        return maxnode;
    }
}

class DisjointSet {
    int[] parent, size;

    public DisjointSet(int n) {
        parent = new int[n];
        size = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    public int find(int p) {
        if (p == parent[p])
            return p;
        return parent[p] = find(parent[p]); 
    }

    public boolean union(int u, int v) {
        int par_u = find(u);
        int par_v = find(v);
        if (par_u == par_v)
            return false;
        if (size[par_u] < size[par_v]) {
            parent[par_u] = par_v;
            size[par_v] += size[par_u];
        } else {
            parent[par_v] = par_u;
            size[par_u] += size[par_v];
        }
        return true;
    }
}
